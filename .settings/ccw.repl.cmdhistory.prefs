cmdhistory=["(get-mail \\"outlook.office365.com\\" \\"veswara@vmware.com\\" \\"C0urag3@0000\\")" "(+ 1 1)" "(print (+ 1 1))" "( get-mail \\"outlook.office365.com\\" \\"veswara@vmware.com\\" \\"C0urag3@0000\\")" "( get-mail \\"email.vmware.com\\" \\"veswara@vmware.com\\" \\"C0urag3@0000\\")" "( get-mail \\"mail.vmware.com\\" \\"veswara@vmware.com\\" \\"C0urag3@0000\\")" "(get-exch-service \\"veswara@vmware.com\\" \\"C0urag3@0000\\" \\"https\://outlook.office365.com/EWS/Exchange.asmx\\")" "get-exch-mail" "(defn get-exch-service [email pass ews-url]\\r\\n  (doto (new ExchangeService ExchangeVersion.Exchange2010_SP2)\\r\\n    (.setCredentials (new WebCredentials email pass))\\r\\n;;    (.setUrl (new URI ews-url))\\r\\n    (.autoDiscoverUrl email)))" "(get-exch-service \\"veswara@vmware.com\\" \\"C0urag3@0000\\")" "(.startsWith (.lowerCase \\"VINAY\\") \\"vina\\")" "(.lowerCase \\"VINAY\\")" "(.lowercase \\"VINAY\\")" "(.toLowerCase \\"VINAY\\")" "(.startsWith (.toLowerCase \\"VINAY\\") \\"vina\\")" "(get-exch-service \\"veswara@vmware.com\\" \\"C0urag3@0000\\")" "(def folders [\\"Inbox\\" \\"bugzilla\\" \\"Sent Items\\"])" "(def x (read-line))" "x" "(def y (do (print \\"What's your name? \\") (flush) (read-line)))" "y" "(.readPassword (.console System))" "(.readPassword java.lang.System/console)" "(.readPassword (.console java.lang.System))" "(def 50-itemview (new ItemView 50))" "\\r\\n(iterator-seq (.iterator itemlist-from-inbox))" "itemview-50" "(itemview-50/Offset)" "(.getOffset itemview-50)" "(itemview-50/Offset)" "(.getMoreAvailable itemview-50)" "(.MoreAvailable itemview-50)" "(bean itemview-50)" "(if true (print \\"hello\\"))" "(if false (print \\"hello\\"))" "(take 2 (repeatedly (repeat-fn)))" "(.MoreAvailable itemlist-from-inbox)" "(bean itemlist-from-inbox)" "(.moreAvailable itemlist-from-inbox)" "(\:moreAvailable (bean itemlist-from-inbox))" "(take 2 (repeat-fn))" "(take 2 (repeat repeat-fn))" "(repeat-fn)" "(take 2 (repeatedly repeat-fn))" "(take 5 lazy-list-of-50-messages)" "(map bean (take 1 lazy-list-of-50-messages))" "(def msglist (flatten (take 1 (lazy-list-of-50-messages))))" "(def msglist (flatten (take 1  lazy-list-of-50-messages)))" "msglist" "(map bean msglist)" "(map bean (map .load msglist))" "(flatten msglist)" "(map .load (flatten msglist))" "(defn loaditem [item]\\n  (.load item))" "(map loaditem (flatten msglist))" "(defn to-bean [item]\\n  (do (.load item)\\n    (bean item)))" "(map to-bean msglist)" "(def f (first msglist))" "(bean f)" "(.load f)" "(bean (.load f))" "(do (.load f) (bean f))" "f" "(bean f)" "(.toString f)" "(bean f)" "itemlist-from-inbox" "password" "(first lazy-list-batch-of-50-messages)" "(def msg (first lazy-list-batch-of-50-messages))" "msg" "(map bean msg)" "(message (first msg))" "msg" "(first msg)" "(def message (first msg))" "message" "(.getName (.getSender message))" "(bean message)" "(.getItemId message)" "(def m message)" "(.getId m)" "(.getParentFolderId m)" "(bean (.getId m))" "(def l '(1 2 3))" "l" "(cons 10 l)" "(prn (unless (odd? 11) (str \\"it's good to be \\" 11)))" "(unless true (print \\"hello\\"))" "'+" "`+" "m" "(map + '(1 2 3 4 5))" "(reduce + '(1 2 3 4 5))" "(map inc '(1 2 3 4 5))" "(reverse \\"hello\\")" "(str (reverse \\"hello\\"))" "(clojure.string/reverse \\"Hello\\")" "(defmacro revstrfn [fnname args]\\r\\n  '(~(clojure.string/reverse fnname) args))" "(vec \\"hello\\")" "(revstrfn cev \\"hello\\")" "(defmacro revstrfn [fnname args]\\r\\n  '((clojure.string/reverse ~fnname) args))" "(revstrfn cev \\"hello\\")" "(macroexpand revstrfn)" "(revstrfn \\"cev\\" \\"hello\\")" "(macroexpand '(revstrfn))" "(macroexpand `(revstrfn))" "(macroexpand `(revstrfn \\"cev\\" \\"hello\\"))" "(defmacro revstrfn [fnname args]\\r\\n  '((clojure.string/reverse fnname) args))" "(macroexpand `(revstrfn \\"cev\\" \\"hello\\"))" "(revstrfn \\"cev\\" \\"hello\\")" "\\r\\n(defmacro revstrfn [fnname args]\\r\\n  ((clojure.string/reverse fnname) args))" "(macroexpand `(revstrfn \\"cev\\" \\"hello\\"))" "(macroexpand `(revstrfn vec \\"hello\\"))" "map" "(name map)" "(name 'map)" "(defmacro revstrfn [fnname args]\\r\\n  ((symbol (clojure.string/reverse (name `fnname))) args))" "(macroexpand `(revstrfn cev \\"hello\\"))" "(macroexpand-1 `(revstrfn cev \\"hello\\"))" "(revstrfn cev \\"hello\\")" "(name `cw)" "(symbol (clojure.string/reverse (name 'cev)))" "((symbol (clojure.string/reverse (name 'cev))) \\"hello\\")" "(vec \\"hello\\")" "\\r\\n(defmacro revstrfn [fnname args]\\r\\n  (list (symbol (clojure.string/reverse (name `fnname))) args))" "(revstrfn cev \\"hello\\")" "(defmacro revstrfn [fnname args]\\r\\n  (list (symbol (clojure.string/reverse (name fnname))) args))" "(revstrfn cev \\"hello\\")" "(list (symbol (clojure.string/reverse (name 'cev))) \\"hello\\")" "(eval (list (symbol (clojure.string/reverse (name 'cev))) \\"hello\\"))" "(defn rev evstrfn [fnname args]\\r\\n  (eval (list \\r\\n    (symbol \\r\\n      (clojure.string/reverse \\r\\n        (name fnname))) args)))" "(defn rev [fnname args]\\r\\n     (eval (list \\r\\n       (symbol \\r\\n         (clojure.string/reverse \\r\\n           (name fnname))) args)))" "(rev cev \\"hello\\")" "(def m (first (first lazy-list-batch-of-50-messages)))" "m" "(bean (.getId m))" "(bean (.getBody m))" "(\:import (com.google.gson Gson))" "(def m (first (first lazy-list-batch-of-50-messages)))" "m" "(def gb (new com.google.gson.GSonBuilder))" "(def gb (new com.google.gson.GsonBuilder))" "(def gson (.create gb))" "gson" "(.toJson gson m)" "m" "(.toJson gson m)" "(bean m)" "(.getBody m)" "(def email-body (.getBody m))" "(.toJson gson email-body)" "email-body" "(bean email-body)" "email-body" "(.getSubject m)" "(.toString (.getBody m))" "(.trim (.toString (.getBody m)))" "(str \\"hello\\" \\"jack\\")" "(defmacro getPropVal [prop msg]\\r\\n  (list (.trim (.toString (list (symbol (str \\".get\\" prop)) msg)))))" "(getPropVal Body msg)" "(defmacro getPropVal [prop msg]\\r\\n  (list (.trim (.toString (list (symbol (str \\".get\\" (name prop))) msg)))))" "(getPropVal Body msg)" "(macroexpand '(getPropVal Body msg))" "(defmacro getPropVal [prop msg]\\r\\n  (list (.trim (list (.toString (list (symbol (str \\".get\\" (name prop))) msg))))))" "(macroexpand '(getPropVal Body msg))" "(defmacro getPropVal [prop msg]\\r\\n  (list (symbol (str \\".get\\" (name prop))) msg))" "(macroexpand '(getPropVal Body msg))" "(. msg getBody)" "m" "(. m getBody)" "(defmacro getPropVal [prop msg]\\r\\n  (.toString (list (symbol (str \\"get\\" (name prop))) msg)))" "(macroexpand '(getPropVal Body msg))" "(defmacro getPropVal [prop msg]\\r\\n  (.toString `(list (symbol (str \\"get\\" (name prop))) msg)))" "(macroexpand '(getPropVal Body msg))" "(defmacro getPropVal [prop msg]\\r\\n  (list (symbol (str \\".get\\" (name prop))) msg))" "(macroexpand '(getPropVal Body msg))" "(defn str-of[body]\\r\\n  (.toString body))" "(defmacro getPropVal [prop msg]\\r\\n  (str-of (list (symbol (str \\".get\\" (name prop))) msg)))" "(macroexpand '(getPropVal Body msg))" "(defmacro getPropVal [prop msg]\\r\\n  (`str-of (list (symbol (str \\".get\\" (name prop))) msg)))" "(macroexpand '(getPropVal Body msg))" "(defmacro getPropVal [prop msg]\\r\\n  (list (str-of (list (symbol (str \\".get\\" (name prop))) msg))))" "(macroexpand '(getPropVal Body msg))" "(defmacro getPropVal [prop msg]\\r\\n  (list str-of (list (symbol (str \\".get\\" (name prop))) msg)))" "(def m (first (first lazy-list-batch-of-50-messages)))" "(getPropVal Id m)" "(.toString (getPropVal Id m))" "(bean (getPropVal Id m))" "(macroexpand '(getPropVal Id m))" "(symbol \\"ehllo\\")" "(symbol \\"\:hello\\")" "(def m (first (first  lazy-list-batch-of-50-messages)))" "(first lazy-list-batch-of-50-messages)" "(def m (first (first lazy-list-batch-of-50-messages)))" "(getPropVal Body m)" "(macroexpand '(getPropVal Body m))" "(defmacro getPropVal2 [prop msg]\\r\\n  (list hash-map (symbol (str \\"\:\\" (name prop))) (list str-of (list (symbol (str \\".get\\" (name prop))) msg))))" "(macroexpand '(getPropVal2Body m))" "(macroexpand '(getPropVal2 Body m))" "(getPropVal2 Body m)" "(\#object[clojure.core$hash_map 0x65e3a254 \\"clojure.core$hash_map@65e3a254\\"] \:Body (\#object[email_classifier.conn$str_of 0x79c05090 \\"email_classifier.conn$str_of@79c05090\\"] (.getBody m)))" "(getPropVal Body m)" "(map symbol [\\"Body\\" \\"Id\\"])" "(getPropVal ReplyTo m)" "(.getReplyTo m)" "(.getCcRecipients m)" "(.toString (.getCcRecipients m))" "(seq? (.getCcRecipients m))" "(iterator-seq (.iterator (.getCcRecipients m)))" "(instance? Collection (.getCcRecipients m))" "(instance? java.util.Collection (.getCcRecipients m))" "(instance? java.lang.Iterable (.getCcRecipients m))" "(defmacro getPropVal2 [prop msg]\\r\\n  (list hash-map (list (symbol (str \\"\:\\" (name prop)))) (list str-of (list (symbol (str \\".get\\" (name prop))) msg))))" "(macroexpand '(getPropVal2 Body m))" "(defmacro getPropVal3 [prop msg]\\r\\n  (list hash-map (symbol (str \\"\:\\" (name prop))) (list str-of (list (symbol (str \\".get\\" (name prop))) msg))))" "(macroexpand '(getPropVal3 Body m))" "(getPropVal3 Body m)" "(defmacro getPropVal4 [prop msg]\\r\\n  (list hash-map (str \\"\:\\" (name prop)) (list str-of (list (symbol (str \\".get\\" (name prop))) msg))))" "(macroexpand '(getPropVal4 Body m))" "(defmacro getPropVal [prop msg]\\r\\n  (list hash-map (name prop) (list str-of (list (symbol (str \\".get\\" (name prop))) msg))))" "(macroexpand '(getPropVal Body m))" "(getPropVal Body m)" "(defn str-of[prop]\\r\\n  (if \\r\\n    (instance? java.lang.Iterable prop) \\r\\n    (map \#(.toString %) (iterator-seq (.iterator prop)))\\r\\n    (.trim (.toString prop))))" "(getPropVal Body m)" "(getPropVal CcRecipients m)" "(getPropVal ReplyTo m)" "(.getCulture m)" "(def prop-list [\\"Id\\",\\n\\"ParentFolderId\\",\\n\\"ItemClass\\",\\n\\"Subject\\",\\n\\"Sensitivity\\",\\n\\"Body\\",\\n\\"Attachments\\",\\n\\"DateTimeReceived\\",\\n\\"Siz\\",\\n\\"Importance\\",\\n\\"InReplyTo\\",\\n\\"IsSubmitted\\",\\n\\"IsDraft\\",\\n\\"IsFromMe\\",\\n\\"IsResend\\",\\n\\"IsUnmodified \\",\\n\\"DateTimeSent\\",\\n\\"DateTimeCreated\\",\\n\\"ReminderDueBy\\",\\n\\"IsReminderSet\\",\\n\\"ReminderMinutesBeforeStart\\",\\n\\"DisplayCc\\",\\n\\"DisplayTo\\",\\n\\"HasAttachments\\",\\n\\"Culture\\",\\n\\"EffectiveRights\\",\\n\\"LastModifiedName\\",\\n\\"LastModifiedTime\\",\\n\\"IsAssociated\\",\\n\\"WebClientReadFormQueryStrin\\",\\n\\"WebClientEditFormQueryString\\",\\n\\"ConversationId\\",\\n\\"Flag\\",\\n\\"InstanceKey\\",\\n\\"Sender\\",\\n\\"ToRecipients\\",\\n\\"CcRecipients\\",\\n\\"BccRecipients\\",\\n\\"IsReadReceiptRequested\\",\\n\\"IsDeliveryReceiptRequested\\",\\n\\"ConversationIndex\\",\\n\\"ConversationTopic\\",\\n\\"From\\",\\n\\"InternetMessageId\\",\\n\\"IsRead\\",\\n\\"IsResponseRequested\\",\\n\\"ReplyTo\\",\\n\\"References\\",\\n\\"ReceivedBy\\",\\n\\"ReceivedRepresenting\\"])" "(defmacro getPropVal [prop msg]\\r\\n  (list hash-map prop (list str-of (list (symbol (str \\".get\\" prop)) msg))))" "(getPropVal \\"ReplyTo\\" m)" "(defn get-props [msg]\\r\\n  (map \#(getPropVal % msg) prop-list))" "(get-props m)" "(defn get-props [email]\\r\\n  (for [property prop-list] (getPropVal property email)))" "(get-props m)" "(macroexpand '(get-props m))" " (macroexpand-1 '(get-props m))" "m" "prop-list" "(for [p prop-list] (println p))" "(set prop-list)" "(for [p (set prop-list)] (println p))" "(map str prop-list)" "(map \#(getPropVal % m) (map str prop-list))" "(def m (first (first lazy-list-batch-of-50-messages)))" "m" "(get-props m)" "(getPropVal \\"Id\\" m)" "(macroexpand '(get-props m))" "(macroexpand-1 '(get-props m))" "(getPropVal Id m)" "(getPropVal \\"Id\\" m)" "(symbol \\"+\\")" "(eval ((symbol \\"+\\") 1 1))" "((symbol \\"+\\") 1 1)" "(eval '((symbol \\"+\\") 1 1))" "(symbol \\"+\\")" "(symbol \\"inc\\")" "((symbol \\"inc\\") 1)" "(def p (get-props m))" "p" "(defn get-props [email]\\r\\n  (map (fn[x] (getPropVal x email)) prop-list))" "(def p (get-props m))" "p" "(defn get-props [email]\\r\\n  (for [p prop-list] (getPropVal p email)))" "(get-props m)" "(defmacro getPropVal [prop msg]\\r\\n  (list hash-map prop (list str-of (list (symbol (str \\".get\\" prop)) msg))))" "(macroexpand '(getPropVal \\"Id\\" m))" "(macroexpand '(for [p prop-list] (getPropVal p email)))" "(macroexpand '(map \#(getPropVal % message) prop-list))" "(macroexpand-1 '(map \#(getPropVal % message) prop-list))" "prop-list" "(macroexpand '(map (fn [x] (getPropVal x message)) prop-list))" "(map (fn [x] (getPropVal x message)) prop-list)" "(map (fn [x] (getPropVal x m)) prop-list)" "(defmacro getPropVal [prop msg]\\r\\n  (list 'hash-map prop (list 'str-of (list 'symbol (list `str \\".get\\" prop)) msg)))" " (macroexpand '(getPropVal \\"Id\\" m))" "(getPropVal \\"Id\\" m)" "(symbol (clojure.core/str \\".get\\" \\"Id\\"))" "(defmacro getPropVal [prop msg]\\r\\n  (list 'hash-map prop (list 'str-of (list (list 'symbol (list `str \\".get\\" prop)) msg))))" "(getPropVal \\"Id\\" m)" "(macroexpand '(getPropVal \\"Id\\" m))" "(defmacro getPropVal [prop msg]\\r\\n  (list 'hash-map prop (list 'str-of (list 'symbol (list `str \\".get\\" prop) msg))))" "(macroexpand '(getPropVal \\"Id\\" m))" "(symbol (clojure.core/str \\".get\\" \\"Id\\"))" "(defmacro getPropVal [prop msg]\\r\\n  (list 'hash-map prop (list 'str-of (list (list 'symbol (list `str \\".get\\" prop)) msg))))" "(macroexpand '(getPropVal \\"Id\\" m))" "(getPropVal \\"Id\\" m)" "((symbol (clojure.core/str \\".get\\" \\"Id\\")) m)" "(eval ((symbol (clojure.core/str \\".get\\" \\"Id\\")) m))" "((symbol (clojure.core/str \\".get\\" \\"Id\\")) m)" "(defmacro getVal [prop val]\\r\\n  `(hash-map prop (str-of ~(symbol (str \\".get\\" prop)) msg)))" "(getVal \\"Id\\" m)" "(defmacro getVal [prop val]\\r\\n  `(hash-map prop (str-of ~(symbol (str \\".get\\" ~prop)) ~msg)))" "(defmacro getVal [prop val]\\r\\n  `(hash-map prop (str-of (~(symbol (str \\".get\\" prop)) msg)" "(defmacro getVal [prop val]\\r\\n  `(hash-map prop (str-of (~(symbol (str \\".get\\" prop)) msg))))" "(getVal \\"Id\\" m)" "(macroexpand '(getVal \\"Id\\" m))" "(defmacro getVal [prop msg]\\r\\n  `(hash-map prop (str-of (~(symbol (str \\".get\\" prop)) msg))))" "(macroexpand '(getVal \\"Id\\" m))" "(.getVal \\"Id\\" m)" "(getVal \\"Id\\" m)" "(defmacro getVal [prop msg]\\r\\n  `(hash-map ~prop (str-of (~(symbol (str \\".get\\" prop)) ~msg))))" "(getVal \\"Id\\" m)" "(macroexpand '(getVal \\"Id\\" m))" "(map \#(getVal % m) prop-list)" "(map \#(apply (symbol \\"inc\\") %) [1 2 3 4 5])" "(eval ((symbol \\"inc\\") 1))" "((symbol \\"inc\\") 1)" "(apply (symbol \\"inc\\") 1)" "(get-val (first prop-list) m)" "(getVal (first prop-list) m)" "(defn get-props [email]\\r\\n  (for [p prop-list] (getVal p email)))" "(get-props m)" "(macroexpand-all '(get-props m))" "(map \#(str \\"get\\" %) prop-list)" "(def getters (map \#(symbol (str \\"get\\" %)) prop-list))" "getters" "(def getters (map \#(symbol (str \\".get\\" %)) prop-list))" "getters" "(def getters (map \#((resolve (symbol (str \\".get\\" %))) prop-list)))" "getters" "(partial inc)" "(def f (partial inc))" "(f 3)" "(defn getProps[property message] \\r\\n  (apply (resolve (symbol (str \\".get\\" property))) message))" "(def expand-props (map \#(partial getProps %) prop-list))" "expand-props" "(map \#(% m) expand-props)" "(map m expand-props)" "(map \#(getProps % m) prop-list)" "(getProps \\"Id\\" m)" "m" "(resolve (symbol (str \\".get\\" property)))" "(resolve (symbol (str \\".get\\" \\"Id\\")))" "(symbol (str \\".get\\" \\"Id\\"))" "(clojure.lang.Reflector/invokeInstanceMethod (str \\".get\\" property) message)" "(clojure.lang.Reflector/invokeInstanceMethod (str \\".get\\" \\"Id\\") m)" "(clojure.lang.Reflector/invokeInstanceMethod (str \\".get\\" property) message [])" "(clojure.lang.Reflector/invokeInstanceMethod (str \\".get\\" \\"Id\\") m [])" "(clojure.lang.Reflector/invokeInstanceMethod m (str \\".get\\" \\"Id\\"))" "(clojure.lang.Reflector/invokeInstanceMethod m (str \\".get\\" \\"Id\\") [])" "(help clojure.lang.Reflector/invokeInstanceMethod)" "(clojure.lang.Reflector/invokeInstanceMethod m \\"getId\\" [])" "(to-array)" "(to-array [])" "(clojure.lang.Reflector/invokeInstanceMethod m \\"getId\\" (to-array []))" "(defn getProps[property message] \\r\\n  (clojure.lang.Reflector/invokeInstanceMethod message (str \\"get\\" property) (to-array [])))" "(defn getproperty[property message] \\r\\n  (clojure.lang.Reflector/invokeInstanceMethod message (str \\"get\\" property) (to-array [])))" "(def mprops (map \#(getproperty % m) prop-list))" "mprops" "prop-list" "(def prop-list [\\"Id\\",\\r\\n\\"ParentFolderId\\",\\r\\n\\"ItemClass\\",\\r\\n\\"Subject\\",\\r\\n\\"Sensitivity\\",\\r\\n\\"Body\\",\\r\\n\\"Attachments\\",\\r\\n\\"DateTimeReceived\\",\\r\\n\\"Size\\",\\r\\n\\"Importance\\",\\r\\n\\"InReplyTo\\",\\r\\n\\"IsSubmitted\\",\\r\\n\\"IsDraft\\",\\r\\n\\"IsFromMe\\",\\r\\n\\"IsResend\\",\\r\\n\\"IsUnmodified \\",\\r\\n\\"DateTimeSent\\",\\r\\n\\"DateTimeCreated\\",\\r\\n\\"ReminderDueBy\\",\\r\\n\\"IsReminderSet\\",\\r\\n\\"ReminderMinutesBeforeStart\\",\\r\\n\\"DisplayCc\\",\\r\\n\\"DisplayTo\\",\\r\\n\\"HasAttachments\\",\\r\\n\\"Culture\\",\\r\\n\\"EffectiveRights\\",\\r\\n\\"LastModifiedName\\",\\r\\n\\"LastModifiedTime\\",\\r\\n\\"IsAssociated\\",\\r\\n\\"WebClientReadFormQueryStrin\\",\\r\\n\\"WebClientEditFormQueryString\\",\\r\\n\\"ConversationId\\",\\r\\n\\"Flag\\",\\r\\n\\"InstanceKey\\",\\r\\n\\"Sender\\",\\r\\n\\"ToRecipients\\",\\r\\n\\"CcRecipients\\",\\r\\n\\"BccRecipients\\",\\r\\n\\"IsReadReceiptRequested\\",\\r\\n\\"IsDeliveryReceiptRequested\\",\\r\\n\\"ConversationIndex\\",\\r\\n\\"ConversationTopic\\",\\r\\n\\"From\\",\\r\\n\\"InternetMessageId\\",\\r\\n\\"IsRead\\",\\r\\n\\"IsResponseRequested\\",\\r\\n\\"ReplyTo\\",\\r\\n\\"References\\",\\r\\n\\"ReceivedBy\\",\\r\\n\\"ReceivedRepresenting\\"])" "(def mprops (map \#(getproperty % m) prop-list))" "mprops" "(.isUnmodified m)" "(.getIsUnModified m)" "(.getIsResend )" "(.getIsResend m)" "(def prop-list [\\"Id\\",\\r\\n\\"ParentFolderId\\",\\r\\n\\"ItemClass\\",\\r\\n\\"Subject\\",\\r\\n\\"Sensitivity\\",\\r\\n\\"Body\\",\\r\\n\\"Attachments\\",\\r\\n\\"DateTimeReceived\\",\\r\\n\\"Size\\",\\r\\n\\"Importance\\",\\r\\n\\"InReplyTo\\",\\r\\n\\"IsSubmitted\\",\\r\\n\\"IsDraft\\",\\r\\n\\"IsFromMe\\",\\r\\n\\"IsResend\\",\\r\\n;;\\"IsUnmodified \\",\\r\\n\\"DateTimeSent\\",\\r\\n\\"DateTimeCreated\\",\\r\\n\\"ReminderDueBy\\",\\r\\n\\"IsReminderSet\\",\\r\\n\\"ReminderMinutesBeforeStart\\",\\r\\n\\"DisplayCc\\",\\r\\n\\"DisplayTo\\",\\r\\n\\"HasAttachments\\",\\r\\n\\"Culture\\",\\r\\n\\"EffectiveRights\\",\\r\\n\\"LastModifiedName\\",\\r\\n\\"LastModifiedTime\\",\\r\\n\\"IsAssociated\\",\\r\\n\\"WebClientReadFormQueryStrin\\",\\r\\n\\"WebClientEditFormQueryString\\",\\r\\n\\"ConversationId\\",\\r\\n\\"Flag\\",\\r\\n\\"InstanceKey\\",\\r\\n\\"Sender\\",\\r\\n\\"ToRecipients\\",\\r\\n\\"CcRecipients\\",\\r\\n\\"BccRecipients\\",\\r\\n\\"IsReadReceiptRequested\\",\\r\\n\\"IsDeliveryReceiptRequested\\",\\r\\n\\"ConversationIndex\\",\\r\\n\\"ConversationTopic\\",\\r\\n\\"From\\",\\r\\n\\"InternetMessageId\\",\\r\\n\\"IsRead\\",\\r\\n\\"IsResponseRequested\\",\\r\\n\\"ReplyTo\\",\\r\\n\\"References\\",\\r\\n\\"ReceivedBy\\",\\r\\n\\"ReceivedRepresenting\\"])" "(map \#(getproperty % m) prop-list)" "(def prop-list [\\"Id\\",\\r\\n\\"ParentFolderId\\",\\r\\n\\"ItemClass\\",\\r\\n\\"Subject\\",\\r\\n\\"Sensitivity\\",\\r\\n\\"Body\\",\\r\\n\\"Attachments\\",\\r\\n\\"DateTimeReceived\\",\\r\\n\\"Size\\",\\r\\n\\"Importance\\",\\r\\n\\"InReplyTo\\",\\r\\n\\"IsSubmitted\\",\\r\\n\\"IsDraft\\",\\r\\n\\"IsFromMe\\",\\r\\n\\"IsResend\\",\\r\\n;;\\"IsUnmodified \\",\\r\\n\\"DateTimeSent\\",\\r\\n\\"DateTimeCreated\\",\\r\\n;;\\"ReminderDueBy\\",\\r\\n\\"IsReminderSet\\",\\r\\n\\"ReminderMinutesBeforeStart\\",\\r\\n\\"DisplayCc\\",\\r\\n\\"DisplayTo\\",\\r\\n\\"HasAttachments\\",\\r\\n\\"Culture\\",\\r\\n\\"EffectiveRights\\",\\r\\n\\"LastModifiedName\\",\\r\\n\\"LastModifiedTime\\",\\r\\n\\"IsAssociated\\",\\r\\n\\"WebClientReadFormQueryStrin\\",\\r\\n\\"WebClientEditFormQueryString\\",\\r\\n\\"ConversationId\\",\\r\\n\\"Flag\\",\\r\\n\\"InstanceKey\\",\\r\\n\\"Sender\\",\\r\\n\\"ToRecipients\\",\\r\\n\\"CcRecipients\\",\\r\\n\\"BccRecipients\\",\\r\\n\\"IsReadReceiptRequested\\",\\r\\n\\"IsDeliveryReceiptRequested\\",\\r\\n\\"ConversationIndex\\",\\r\\n\\"ConversationTopic\\",\\r\\n\\"From\\",\\r\\n\\"InternetMessageId\\",\\r\\n\\"IsRead\\",\\r\\n\\"IsResponseRequested\\",\\r\\n\\"ReplyTo\\",\\r\\n\\"References\\",\\r\\n\\"ReceivedBy\\",\\r\\n\\"ReceivedRepresenting\\"])" "(map \#(getproperty % m) prop-list)" "(def prop-list [\\"Id\\",\\r\\n\\"ParentFolderId\\",\\r\\n\\"ItemClass\\",\\r\\n\\"Subject\\",\\r\\n\\"Sensitivity\\",\\r\\n\\"Body\\",\\r\\n\\"Attachments\\",\\r\\n\\"DateTimeReceived\\",\\r\\n\\"Size\\",\\r\\n\\"Importance\\",\\r\\n\\"InReplyTo\\",\\r\\n\\"IsSubmitted\\",\\r\\n\\"IsDraft\\",\\r\\n\\"IsFromMe\\",\\r\\n\\"IsResend\\",\\r\\n;;\\"IsUnmodified \\",\\r\\n\\"DateTimeSent\\",\\r\\n\\"DateTimeCreated\\",\\r\\n;;\\"ReminderDueBy\\",\\r\\n;;\\"IsReminderSet\\",\\r\\n;;\\"ReminderMinutesBeforeStart\\",\\r\\n\\"DisplayCc\\",\\r\\n\\"DisplayTo\\",\\r\\n\\"HasAttachments\\",\\r\\n\\"Culture\\",\\r\\n\\"EffectiveRights\\",\\r\\n\\"LastModifiedName\\",\\r\\n\\"LastModifiedTime\\",\\r\\n\\"IsAssociated\\",\\r\\n\\"WebClientReadFormQueryStrin\\",\\r\\n\\"WebClientEditFormQueryString\\",\\r\\n\\"ConversationId\\",\\r\\n\\"Flag\\",\\r\\n\\"InstanceKey\\",\\r\\n\\"Sender\\",\\r\\n\\"ToRecipients\\",\\r\\n\\"CcRecipients\\",\\r\\n\\"BccRecipients\\",\\r\\n\\"IsReadReceiptRequested\\",\\r\\n\\"IsDeliveryReceiptRequested\\",\\r\\n\\"ConversationIndex\\",\\r\\n\\"ConversationTopic\\",\\r\\n\\"From\\",\\r\\n\\"InternetMessageId\\",\\r\\n\\"IsRead\\",\\r\\n\\"IsResponseRequested\\",\\r\\n\\"ReplyTo\\",\\r\\n\\"References\\",\\r\\n\\"ReceivedBy\\",\\r\\n\\"ReceivedRepresenting\\"])" "(map \#(getproperty % m) prop-list)" "(def prop-list [\\"Id\\",\\r\\n\\"ParentFolderId\\",\\r\\n\\"ItemClass\\",\\r\\n\\"Subject\\",\\r\\n\\"Sensitivity\\",\\r\\n\\"Body\\",\\r\\n\\"Attachments\\",\\r\\n\\"DateTimeReceived\\",\\r\\n\\"Size\\",\\r\\n\\"Importance\\",\\r\\n\\"InReplyTo\\",\\r\\n\\"IsSubmitted\\",\\r\\n\\"IsDraft\\",\\r\\n\\"IsFromMe\\",\\r\\n\\"IsResend\\",\\r\\n;;\\"IsUnmodified \\",\\r\\n\\"DateTimeSent\\",\\r\\n\\"DateTimeCreated\\",\\r\\n;;\\"ReminderDueBy\\",\\r\\n;;\\"IsReminderSet\\",\\r\\n;;\\"ReminderMinutesBeforeStart\\",\\r\\n\\"DisplayCc\\",\\r\\n\\"DisplayTo\\",\\r\\n\\"HasAttachments\\",\\r\\n\\"Culture\\",\\r\\n\\"EffectiveRights\\",\\r\\n\\"LastModifiedName\\",\\r\\n\\"LastModifiedTime\\",\\r\\n\\"IsAssociated\\",\\r\\n;;\\"WebClientReadFormQueryStrin\\",\\r\\n\\"WebClientEditFormQueryString\\",\\r\\n\\"ConversationId\\",\\r\\n\\"Flag\\",\\r\\n\\"InstanceKey\\",\\r\\n\\"Sender\\",\\r\\n\\"ToRecipients\\",\\r\\n\\"CcRecipients\\",\\r\\n\\"BccRecipients\\",\\r\\n\\"IsReadReceiptRequested\\",\\r\\n\\"IsDeliveryReceiptRequested\\",\\r\\n\\"ConversationIndex\\",\\r\\n\\"ConversationTopic\\",\\r\\n\\"From\\",\\r\\n\\"InternetMessageId\\",\\r\\n\\"IsRead\\",\\r\\n\\"IsResponseRequested\\",\\r\\n\\"ReplyTo\\",\\r\\n\\"References\\",\\r\\n\\"ReceivedBy\\",\\r\\n\\"ReceivedRepresenting\\"])" "(map \#(getproperty % m) prop-list)" "(str-of (.getWebClientEditFormQueryString m))" "(.getWebClientEditFormQueryString m)" "(defn str-of[prop]\\r\\n  (if (nil? prop) nil\\r\\n    (if\\r\\n      (instance? java.lang.Iterable prop) \\r\\n      (map \#(.toString %) (iterator-seq (.iterator prop)))\\r\\n      (.trim (.toString prop)))))" "(str-of (.getWebClientEditFormQueryString m))" "(def prop-list [\\"Id\\",\\r\\n\\"ParentFolderId\\",\\r\\n\\"ItemClass\\",\\r\\n\\"Subject\\",\\r\\n\\"Sensitivity\\",\\r\\n\\"Body\\",\\r\\n\\"Attachments\\",\\r\\n\\"DateTimeReceived\\",\\r\\n\\"Size\\",\\r\\n\\"Importance\\",\\r\\n\\"InReplyTo\\",\\r\\n\\"IsSubmitted\\",\\r\\n\\"IsDraft\\",\\r\\n\\"IsFromMe\\",\\r\\n\\"IsResend\\",\\r\\n;;\\"IsUnmodified \\",\\r\\n\\"DateTimeSent\\",\\r\\n\\"DateTimeCreated\\",\\r\\n;;\\"ReminderDueBy\\",\\r\\n;;\\"IsReminderSet\\",\\r\\n;;\\"ReminderMinutesBeforeStart\\",\\r\\n\\"DisplayCc\\",\\r\\n\\"DisplayTo\\",\\r\\n\\"HasAttachments\\",\\r\\n\\"Culture\\",\\r\\n\\"EffectiveRights\\",\\r\\n\\"LastModifiedName\\",\\r\\n\\"LastModifiedTime\\",\\r\\n\\"IsAssociated\\",\\r\\n;;\\"WebClientReadFormQueryStrin\\",\\r\\n;;\\"WebClientEditFormQueryString\\",\\r\\n\\"ConversationId\\",\\r\\n;;\\"Flag\\",\\r\\n\\"InstanceKey\\",\\r\\n\\"Sender\\",\\r\\n\\"ToRecipients\\",\\r\\n\\"CcRecipients\\",\\r\\n\\"BccRecipients\\",\\r\\n\\"IsReadReceiptRequested\\",\\r\\n\\"IsDeliveryReceiptRequested\\",\\r\\n\\"ConversationIndex\\",\\r\\n\\"ConversationTopic\\",\\r\\n\\"From\\",\\r\\n\\"InternetMessageId\\",\\r\\n\\"IsRead\\",\\r\\n\\"IsResponseRequested\\",\\r\\n\\"ReplyTo\\",\\r\\n\\"References\\",\\r\\n\\"ReceivedBy\\",\\r\\n\\"ReceivedRepresenting\\"])" "(map \#(getproperty % m) prop-list)" "(.getInstanceKey m)" "(def prop-list [\\"Id\\",\\r\\n\\"ParentFolderId\\",\\r\\n\\"ItemClass\\",\\r\\n\\"Subject\\",\\r\\n\\"Sensitivity\\",\\r\\n\\"Body\\",\\r\\n\\"Attachments\\",\\r\\n\\"DateTimeReceived\\",\\r\\n\\"Size\\",\\r\\n\\"Importance\\",\\r\\n\\"InReplyTo\\",\\r\\n\\"IsSubmitted\\",\\r\\n\\"IsDraft\\",\\r\\n\\"IsFromMe\\",\\r\\n\\"IsResend\\",\\r\\n;;\\"IsUnmodified \\",\\r\\n\\"DateTimeSent\\",\\r\\n\\"DateTimeCreated\\",\\r\\n;;\\"ReminderDueBy\\",\\r\\n;;\\"IsReminderSet\\",\\r\\n;;\\"ReminderMinutesBeforeStart\\",\\r\\n\\"DisplayCc\\",\\r\\n\\"DisplayTo\\",\\r\\n\\"HasAttachments\\",\\r\\n\\"Culture\\",\\r\\n\\"EffectiveRights\\",\\r\\n\\"LastModifiedName\\",\\r\\n\\"LastModifiedTime\\",\\r\\n\\"IsAssociated\\",\\r\\n;;\\"WebClientReadFormQueryStrin\\",\\r\\n;;\\"WebClientEditFormQueryString\\",\\r\\n\\"ConversationId\\",\\r\\n;;\\"Flag\\",\\r\\n;;\\"InstanceKey\\",\\r\\n\\"Sender\\",\\r\\n\\"ToRecipients\\",\\r\\n\\"CcRecipients\\",\\r\\n\\"BccRecipients\\",\\r\\n\\"IsReadReceiptRequested\\",\\r\\n\\"IsDeliveryReceiptRequested\\",\\r\\n\\"ConversationIndex\\",\\r\\n\\"ConversationTopic\\",\\r\\n\\"From\\",\\r\\n\\"InternetMessageId\\",\\r\\n\\"IsRead\\",\\r\\n\\"IsResponseRequested\\",\\r\\n\\"ReplyTo\\",\\r\\n\\"References\\",\\r\\n\\"ReceivedBy\\",\\r\\n\\"ReceivedRepresenting\\"])" " (map \#(getproperty % m) prop-list)" "(.getIsReadReceiptRequested m)" "(def prop-list [\\"Id\\",\\r\\n\\"ParentFolderId\\",\\r\\n\\"ItemClass\\",\\r\\n\\"Subject\\",\\r\\n\\"Sensitivity\\",\\r\\n\\"Body\\",\\r\\n\\"Attachments\\",\\r\\n\\"DateTimeReceived\\",\\r\\n\\"Size\\",\\r\\n\\"Importance\\",\\r\\n\\"InReplyTo\\",\\r\\n\\"IsSubmitted\\",\\r\\n\\"IsDraft\\",\\r\\n\\"IsFromMe\\",\\r\\n\\"IsResend\\",\\r\\n;;\\"IsUnmodified \\",\\r\\n\\"DateTimeSent\\",\\r\\n\\"DateTimeCreated\\",\\r\\n;;\\"ReminderDueBy\\",\\r\\n;;\\"IsReminderSet\\",\\r\\n;;\\"ReminderMinutesBeforeStart\\",\\r\\n\\"DisplayCc\\",\\r\\n\\"DisplayTo\\",\\r\\n\\"HasAttachments\\",\\r\\n\\"Culture\\",\\r\\n\\"EffectiveRights\\",\\r\\n\\"LastModifiedName\\",\\r\\n\\"LastModifiedTime\\",\\r\\n\\"IsAssociated\\",\\r\\n;;\\"WebClientReadFormQueryStrin\\",\\r\\n;;\\"WebClientEditFormQueryString\\",\\r\\n\\"ConversationId\\",\\r\\n;;\\"Flag\\",\\r\\n;;\\"InstanceKey\\",\\r\\n\\"Sender\\",\\r\\n\\"ToRecipients\\",\\r\\n\\"CcRecipients\\",\\r\\n\\"BccRecipients\\",\\r\\n\\"IsReadReceiptRequested\\",\\r\\n;;\\"IsDeliveryReceiptRequested\\",\\r\\n\\"ConversationIndex\\",\\r\\n\\"ConversationTopic\\",\\r\\n\\"From\\",\\r\\n\\"InternetMessageId\\",\\r\\n\\"IsRead\\",\\r\\n\\"IsResponseRequested\\",\\r\\n\\"ReplyTo\\",\\r\\n\\"References\\",\\r\\n\\"ReceivedBy\\",\\r\\n\\"ReceivedRepresenting\\"])" "(map \#(getproperty % m) prop-list)" "(map str-of (map \#(getproperty % m) prop-list))" "(list \\"hello\\")" "(zipmap prop-list (map str-of (map \#(getproperty % m) prop-list)))" "(\:require [cheshire.core \:refer \:all])" "(defn getproperty[property message] \\r\\n  (str-of (clojure.lang.Reflector/invokeInstanceMethod message (str \\"get\\" property) (to-array []))))" "(def outmap (zipmap prop-list (map (\#getproperty % m) prop-list)))" "(map (\#getproperty % m) prop-list)" "(def outmap (zipmap prop-list (map \#(getproperty % m) prop-list)))" "outmap" "(generate-string outmap)" "(generate-string outmap {\:pretty true})"]
eclipse.preferences.version=1
